
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000152  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e6  2**0
                  ALLOC
  3 .stab         0000066c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cad  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00001518  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
#define button PC5
#define button_interrupt PCINT13

//PCINT1 interrupt
ISR(PCINT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
    uint8_t changedbits;
    
    //capture which bits have changed since last time
    
    changedbits = PINC ^ portchistory;
  9e:	96 b1       	in	r25, 0x06	; 6
  a0:	80 91 00 01 	lds	r24, 0x0100
  a4:	89 27       	eor	r24, r25
    portchistory = PINC;
  a6:	96 b1       	in	r25, 0x06	; 6
  a8:	90 93 00 01 	sts	0x0100, r25
    
    if(changedbits & _BV(PC0))
  ac:	80 ff       	sbrs	r24, 0
  ae:	11 c0       	rjmp	.+34     	; 0xd2 <__vector_4+0x42>
    {
        /* PCINT8 changed */
        // Knob 1
        
        if (_BV(PC0) & PINC) //rising edge
  b0:	30 9b       	sbis	0x06, 0	; 6
  b2:	03 c0       	rjmp	.+6      	; 0xba <__vector_4+0x2a>
        {
            if (_BV(PC1) & PINC) //clockwise
  b4:	31 9b       	sbis	0x06, 1	; 6
  b6:	03 c0       	rjmp	.+6      	; 0xbe <__vector_4+0x2e>
  b8:	08 c0       	rjmp	.+16     	; 0xca <__vector_4+0x3a>
            else
                knob1_value--;
        }
        else //falling edge
        {
            if (_BV(PC1) & PINC)
  ba:	31 9b       	sbis	0x06, 1	; 6
  bc:	06 c0       	rjmp	.+12     	; 0xca <__vector_4+0x3a>
        if (_BV(PC0) & PINC) //rising edge
        {
            if (_BV(PC1) & PINC) //clockwise
                knob1_value++;
            else
                knob1_value--;
  be:	80 91 01 01 	lds	r24, 0x0101
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	80 93 01 01 	sts	0x0101, r24
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <__vector_4+0x52>
        else //falling edge
        {
            if (_BV(PC1) & PINC)
                knob1_value--;
            else
                knob1_value++;
  ca:	80 91 01 01 	lds	r24, 0x0101
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	f9 cf       	rjmp	.-14     	; 0xc4 <__vector_4+0x34>
        }
    }
    
    else if(changedbits & _BV(button) && ((PINC & _BV(button)) == 0)){
  d2:	85 ff       	sbrs	r24, 5
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <__vector_4+0x52>
  d6:	35 99       	sbic	0x06, 5	; 6
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__vector_4+0x52>
        /*Button Pressed*/
        
        //Turn on other LED while pressed
        PORTD ^= (1 << PD5);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	90 e2       	ldi	r25, 0x20	; 32
  de:	89 27       	eor	r24, r25
  e0:	8b b9       	out	0x0b, r24	; 11
    }
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <pwm_init>:

void pwm_init(void)
{
    // Fast PWM mode
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	83 60       	ori	r24, 0x03	; 3
  f4:	84 bd       	out	0x24, r24	; 36
    // clear OC0A on compare match, set on BOTTOM (inverting)
    TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	80 6c       	ori	r24, 0xC0	; 192
  fa:	84 bd       	out	0x24, r24	; 36
    
    // Use clock directly, no prescaler
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	85 bd       	out	0x25, r24	; 37
    
    // initialize counter for TIMER 0
    TCNT0 = 0;
 102:	16 bc       	out	0x26, r1	; 38
 104:	08 95       	ret

00000106 <IO_init>:
}

void IO_init(void){
    //Set two LEDs as output
    DDRD |= (1 << DDD6) | (1 << PD5);
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	80 66       	ori	r24, 0x60	; 96
 10a:	8a b9       	out	0x0a, r24	; 10
    
    /* set PD2 and PD3 as input */
    DDRC &= ~(1 << PCINT8);
 10c:	38 98       	cbi	0x07, 0	; 7
    DDRC &= ~(1 << PCINT9);
 10e:	39 98       	cbi	0x07, 1	; 7
    PORTC |= (1 << PCINT8)|(1 << PCINT9);  //enable pullups
 110:	88 b1       	in	r24, 0x08	; 8
 112:	83 60       	ori	r24, 0x03	; 3
 114:	88 b9       	out	0x08, r24	; 8
    
    //Set PC5 as input with pullup
    DDRC &= ~(1 << button);
 116:	3d 98       	cbi	0x07, 5	; 7
    PORTC |= (1 << button);
 118:	45 9a       	sbi	0x08, 5	; 8
    
    //enable PCINT1 interrupt signal
    PCICR |= _BV(PCIE1);
 11a:	e8 e6       	ldi	r30, 0x68	; 104
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
    //enable interrupts on four pins
    PCMSK1 |= (_BV(PCINT8) | _BV(PCINT10) | _BV(PCINT12) | _BV(button_interrupt));
 124:	ec e6       	ldi	r30, 0x6C	; 108
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	85 63       	ori	r24, 0x35	; 53
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <main>:
}

int main(void)
{
    //Initialize PWM and IO
    pwm_init();
 130:	0e 94 78 00 	call	0xf0	; 0xf0 <pwm_init>
    IO_init();
 134:	0e 94 83 00 	call	0x106	; 0x106 <IO_init>
    
    //Enable global interrupts
    sei();
 138:	78 94       	sei
    
    while(1)
    {
        //Set the value of PD6 to the knob value
        OCR0A = knob1_value;
 13a:	80 91 01 01 	lds	r24, 0x0101
 13e:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0x14>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x1a>
 14a:	00 00       	nop
 14c:	f6 cf       	rjmp	.-20     	; 0x13a <main+0xa>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
