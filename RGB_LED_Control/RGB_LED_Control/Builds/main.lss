
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  00000292  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cbe  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  000016d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000117  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  9e:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:

int i = 0;

//PCINT1 interrupt
ISR(PCINT1_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
    uint8_t changedbits;
    
    //capture which bits have changed since last time
    
    changedbits = PINC ^ portchistory;
  b4:	96 b1       	in	r25, 0x06	; 6
  b6:	80 91 06 01 	lds	r24, 0x0106
  ba:	89 27       	eor	r24, r25
    portchistory = PINC;
  bc:	96 b1       	in	r25, 0x06	; 6
  be:	90 93 06 01 	sts	0x0106, r25
    
    if(changedbits & _BV(PC0))
  c2:	80 ff       	sbrs	r24, 0
  c4:	37 c0       	rjmp	.+110    	; 0x134 <__vector_4+0x8e>
  c6:	80 91 04 01 	lds	r24, 0x0104
  ca:	90 91 05 01 	lds	r25, 0x0105
    {
        /* PCINT8 changed */
        // Knob 1
        
        if (_BV(PC0) & PINC) //rising edge
  ce:	30 9b       	sbis	0x06, 0	; 6
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <__vector_4+0x32>
        {
            if (_BV(PC1) & PINC){
  d2:	31 9b       	sbis	0x06, 1	; 6
  d4:	03 c0       	rjmp	.+6      	; 0xdc <__vector_4+0x36>
  d6:	19 c0       	rjmp	.+50     	; 0x10a <__vector_4+0x64>
            }
                
        }
        else //falling edge
        {
            if (_BV(PC1) & PINC){
  d8:	31 9b       	sbis	0x06, 1	; 6
  da:	17 c0       	rjmp	.+46     	; 0x10a <__vector_4+0x64>
                else if(i == 1){blue_value++;}
                else if(i == 2){green_value++;}
            }

            else{
                if(i == 0){red_value--;}
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	31 f4       	brne	.+12     	; 0xec <__vector_4+0x46>
  e0:	80 91 00 01 	lds	r24, 0x0100
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24
  ea:	37 c0       	rjmp	.+110    	; 0x15a <__vector_4+0xb4>
                else if(i == 1){blue_value--;}
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 05       	cpc	r25, r1
  f0:	31 f4       	brne	.+12     	; 0xfe <__vector_4+0x58>
  f2:	80 91 01 01 	lds	r24, 0x0101
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	80 93 01 01 	sts	0x0101, r24
  fc:	2e c0       	rjmp	.+92     	; 0x15a <__vector_4+0xb4>
        else //falling edge
        {
            if (_BV(PC1) & PINC){
                if(i == 0){red_value--;}
                else if(i == 1){blue_value--;}
                else if(i == 2){green_value--;}
  fe:	02 97       	sbiw	r24, 0x02	; 2
 100:	61 f5       	brne	.+88     	; 0x15a <__vector_4+0xb4>
 102:	80 91 02 01 	lds	r24, 0x0102
 106:	81 50       	subi	r24, 0x01	; 1
 108:	12 c0       	rjmp	.+36     	; 0x12e <__vector_4+0x88>
            }

            else{
                if(i == 0){red_value++;}
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	21 f4       	brne	.+8      	; 0x116 <__vector_4+0x70>
 10e:	80 91 00 01 	lds	r24, 0x0100
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	e8 cf       	rjmp	.-48     	; 0xe6 <__vector_4+0x40>
                else if(i == 1){blue_value++;}
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	91 05       	cpc	r25, r1
 11a:	21 f4       	brne	.+8      	; 0x124 <__vector_4+0x7e>
 11c:	80 91 01 01 	lds	r24, 0x0101
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	ea cf       	rjmp	.-44     	; 0xf8 <__vector_4+0x52>
                else if(i == 2){green_value++;}
 124:	02 97       	sbiw	r24, 0x02	; 2
 126:	c9 f4       	brne	.+50     	; 0x15a <__vector_4+0xb4>
 128:	80 91 02 01 	lds	r24, 0x0102
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 93 02 01 	sts	0x0102, r24
 132:	13 c0       	rjmp	.+38     	; 0x15a <__vector_4+0xb4>

            }
        }
    }
    
    else if(changedbits & _BV(PC5) && ((PINC & _BV(PC5)) == 0)){
 134:	85 ff       	sbrs	r24, 5
 136:	11 c0       	rjmp	.+34     	; 0x15a <__vector_4+0xb4>
 138:	35 99       	sbic	0x06, 5	; 6
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__vector_4+0xb4>
        i++;
 13c:	80 91 04 01 	lds	r24, 0x0104
 140:	90 91 05 01 	lds	r25, 0x0105
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 05 01 	sts	0x0105, r25
 14a:	80 93 04 01 	sts	0x0104, r24
        if(i == 3){i = 0;}
 14e:	03 97       	sbiw	r24, 0x03	; 3
 150:	21 f4       	brne	.+8      	; 0x15a <__vector_4+0xb4>
 152:	10 92 05 01 	sts	0x0105, r1
 156:	10 92 04 01 	sts	0x0104, r1
    }
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <pwm_init>:

void pwm_init(void)
{
    // Fast PWM mode
    TCCR0A |= (1 << WGM01) | (1 << WGM00);
 168:	84 b5       	in	r24, 0x24	; 36
 16a:	83 60       	ori	r24, 0x03	; 3
 16c:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
 16e:	e0 eb       	ldi	r30, 0xB0	; 176
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	83 60       	ori	r24, 0x03	; 3
 176:	80 83       	st	Z, r24
    
    // clear OC0A on compare match, set on BOTTOM (inverting)
    TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0);
 178:	84 b5       	in	r24, 0x24	; 36
 17a:	80 6f       	ori	r24, 0xF0	; 240
 17c:	84 bd       	out	0x24, r24	; 36
    TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 17e:	80 81       	ld	r24, Z
 180:	80 63       	ori	r24, 0x30	; 48
 182:	80 83       	st	Z, r24
    
    // Use clock directly, no prescaler
    TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 184:	85 b5       	in	r24, 0x25	; 37
 186:	81 60       	ori	r24, 0x01	; 1
 188:	85 bd       	out	0x25, r24	; 37
    TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 18a:	e1 eb       	ldi	r30, 0xB1	; 177
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 83       	st	Z, r24

    
    // initialize counter for TIMER 0
    TCNT0 = 0;
 194:	16 bc       	out	0x26, r1	; 38
    TCNT2 = 0;
 196:	10 92 b2 00 	sts	0x00B2, r1
    
    //Set LED pins as output
    DDRD |= ((1 << PD3) | (1 << PD5) | (1 << PD6));
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	88 66       	ori	r24, 0x68	; 104
 19e:	8a b9       	out	0x0a, r24	; 10
    
    //Rotary encoder pins as input
    DDRC &= ~(1 << PCINT8);
 1a0:	38 98       	cbi	0x07, 0	; 7
    DDRC &= ~(1 << PCINT9);
 1a2:	39 98       	cbi	0x07, 1	; 7
    PORTC |= (1 << PCINT8)|(1 << PCINT9);
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	83 60       	ori	r24, 0x03	; 3
 1a8:	88 b9       	out	0x08, r24	; 8
    
    //Button as input
    DDRC &= ~(1 << PC5);
 1aa:	3d 98       	cbi	0x07, 5	; 7
    PORTC |= (1 << PC5);
 1ac:	45 9a       	sbi	0x08, 5	; 8
    
    //Enable Interrupts
    PCICR |= _BV(PCIE1);
 1ae:	e8 e6       	ldi	r30, 0x68	; 104
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 83       	st	Z, r24
    PCMSK1 |= (_BV(PCINT8) | _BV(PCINT10) | _BV(PCINT12) | _BV(PCINT13));
 1b8:	ec e6       	ldi	r30, 0x6C	; 108
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	85 63       	ori	r24, 0x35	; 53
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <main>:
}

int main(void)
{
    pwm_init();
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <pwm_init>
    sei();			//Enable global interrupts
 1c8:	78 94       	sei
    
    OCR0B = 255;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	88 bd       	out	0x28, r24	; 40
    OCR0A = 255;
 1ce:	87 bd       	out	0x27, r24	; 39
    OCR2B = 255;
 1d0:	80 93 b4 00 	sts	0x00B4, r24
    
    while(1)
    {
        OCR0A = red_value;
 1d4:	80 91 00 01 	lds	r24, 0x0100
 1d8:	87 bd       	out	0x27, r24	; 39
        OCR0B = blue_value;
 1da:	80 91 01 01 	lds	r24, 0x0101
 1de:	88 bd       	out	0x28, r24	; 40
        OCR2B = green_value;
 1e0:	80 91 02 01 	lds	r24, 0x0102
 1e4:	80 93 b4 00 	sts	0x00B4, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x28>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x2e>
 1f2:	00 00       	nop
 1f4:	ef cf       	rjmp	.-34     	; 0x1d4 <main+0x10>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
